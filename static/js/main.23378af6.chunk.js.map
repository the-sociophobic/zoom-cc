{"version":3,"sources":["components/NewVersion/models/subtitle.js","components/Input.js","utils/serverURL.js","components/NewVersion/index.js","components/OldVersion/fns.js","components/OldVersion/index.js","App.js","serviceWorker.js","index.js"],"names":["id","type","APIToken","required","example","line","number","posted","Input","props","focus","inputFieldRef","current","blur","onKeyDown","e","value","match","onChange","replace","onFocus","onBlur","render","className","errorMessage","ref","placeholder","event","target","disabled","label","React","createRef","Component","process","axios","defaults","headers","post","NewVersion","componentDidMount","login","state","activateLoader","fn","a","setState","loading","subtitles","forEach","sub","style","tryPost","URL","res","data","error","console","log","alert","length","map","serverURL","window","localStorage","setItem","logout","removeItem","undefined","APITokenInput","initialText","next","saveSubtitle","subtitle","_","pick","keys","model","deleteSubtitle","swapSubtitles","sub0","sub1","subtitle0","subtitle1","insertSubtitle","prevSub","index","slice","setTimeout","renderLoading","renderLogin","onClick","renderControl","indexOf","renderSubtitles","filter","format","Date","rows","keyCode","includes","height","ReactDOM","createPortal","document","body","getItem","requestLink","count","OldVersion","counter","text","split","history","replaceState","string","then","postCC","parseInt","location","hash","App","setVersion","ver","currentVersion","renderButtons","role","aria-label","title","renderHeader","renderSelect","Boolean","hostname","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.23378af6.chunk.js","sourcesContent":["export default {\n  id: {\n    type: 'ref',\n  },\n  APIToken: {\n    type: 'string',\n    required: true,\n    example: \"zjhdfboepsDKFB\",\n  },\n  line: {\n    type: 'string',\n    required: true,\n    example: \"привет,\",\n  },\n  number: {\n    type: 'number',\n    required: true,\n    example: 0,\n  },\n  posted: {\n    type: 'number',\n    example: 1230000,\n  }\n}","import React, { Component } from 'react'\n\n\nexport default class Input extends Component {\n  constructor(props) {\n    super(props)\n    this.inputFieldRef = props.inputFieldRef || React.createRef()\n  }\n\n  focus = () => this.inputFieldRef.current && this.inputFieldRef.current.focus()\n  blur = () => this.inputFieldRef.current && this.inputFieldRef.current.blur()\n\n  onKeyDown = e => {\n    const value = \"\" + this.props.value\n    \n    if (this.props.number)\n      if (this.props.value && value.match(/[^0-9]/g))\n        this.props.onChange(value.replace(/[^0-9]/g, ''))\n    this.props.onKeyDown && this.props.onKeyDown(e)\n  }\n  onFocus = e => {\n    this.props.onFocus && this.props.onFocus(e)\n  }\n  onBlur = e => {\n    this.props.onBlur && this.props.onBlur(e)\n  }\n\n  render = () => (\n    <div\n      className={\"form-group \" +\n        this.props.className + \" \" +\n        (this.props.errorMessage && \"form-group--error\")\n      }\n    >\n      <input\n        ref={this.inputFieldRef}\n        type={this.props.number ? \"number\" : \"text\"}\n        className=\"form-group__input\"\n        placeholder={this.props.placeholder}\n        required={this.props.required}\n        value={this.props.value}\n        onChange={event => this.props.onChange(event.target.value)}\n        onFocus={this.onFocus}\n        onBlur={this.onBlur}\n        onKeyDown={this.onKeyDown}\n        disabled={this.props.disabled}\n      />\n      {this.props.label &&\n        <label className=\"form-group__label\">\n          {this.props.label}\n        </label>}\n    </div>\n  )\n}\n","export default process.env.NODE_ENV === 'production' ?\n  \"https://schedule.tochkadostupa.spb.ru/zoom-cc/\"\n  :\n  \"http://localhost:3000/zoom-cc/\"","import React from 'react'\nimport ReactDOM from 'react-dom'\n\nimport axios from 'axios'\nimport { format } from 'date-fns'\nimport _ from 'lodash'\n\nimport model from './models/subtitle'\nimport Input from 'components/Input'\nimport serverURL from 'utils/serverURL'\n\nimport 'styles/index.sass'\n\n\naxios.defaults.headers.post['Accept'] = \"*/*\"\naxios.defaults.headers.post['Content-Type'] = \"json\"\n\n\nclass NewVersion extends React.Component {\n  constructor(props) {\n    super(props)\n\n    const APIToken = window.localStorage.getItem('APIToken')\n\n    this.state = {\n      APIToken: APIToken || \"\",\n      APITokenInput: \"\",\n      subtitles: [],\n      initialText: \"\",\n      loading: false,\n    }\n  }\n\n  componentDidMount = () =>\n    this.login(this.state.APIToken)\n\n  activateLoader = async fn => {\n    this.setState({loading: true})\n    await fn()\n    this.state.subtitles\n      .forEach(sub =>\n        sub.ref.current &&\n          (sub.ref.current.style = ''))\n    this.setState({loading: false})\n  }\n\n  tryPost = async (URL, props) =>\n    await this.activateLoader(async () => {\n      const res = (await axios.post(URL, props)).data\n\n      if (res.error) {\n        console.log(res.error)\n        alert(\"Error: check the console\")\n        return\n      }\n  \n      this.setState({\n        subtitles: [\n          ...res,\n          {\n            APIToken: this.state.APIToken,\n            number: res.length === 0 ? 1 : res[res.length - 1].number + 1,\n            line: \"\"\n          }\n        ].map(sub => ({\n          ...sub,\n          ref: React.createRef()\n        }))\n      })\n    })\n\n  login = async APIToken => {\n    if (APIToken) {\n      await this.tryPost(\n        serverURL + \"login\",\n        { APIToken: APIToken })\n\n      this.setState({APIToken: APIToken})\n      window.localStorage.setItem('APIToken', APIToken)\n    }\n  }\n\n  logout = () => {\n    window.localStorage.removeItem('APIToken')\n    this.setState({\n      APIToken: undefined,\n      subtitles: [],\n      APITokenInput: \"\",\n      initialText: \"\",\n    })\n  }\n\n  next = async () =>\n    await this.tryPost(\n      serverURL + \"next\",\n      { APIToken: this.state.APIToken })\n\n  saveSubtitle = async sub =>\n    await this.tryPost(\n      serverURL + \"save\",\n      { subtitle: _.pick(sub, _.keys(model)) })\n\n  deleteSubtitle = async sub => \n    await this.tryPost(\n      serverURL + \"delete\",\n      { subtitle: _.pick(sub, _.keys(model)) })\n\n  swapSubtitles = async (sub0, sub1) =>\n    await this.tryPost(\n      serverURL + \"swap\",\n      { subtitle0: sub0.id, subtitle1: sub1.id })\n\n  insertSubtitle = (prevSub, index) => {\n    this.setState({\n      subtitles: [\n        ...this.state.subtitles.slice(0, index + 1),\n        {\n          line: \"\",\n          number: prevSub.number + 1,\n          APIToken: this.state.APIToken,\n          ref: React.createRef(),\n        },\n        ...this.state.subtitles.slice(index + 1)\n      ]\n    })\n    setTimeout(() =>\n      this.state.subtitles[index + 1].ref.current.focus()\n    , 200)\n  }\n\n\n  renderLoading = () =>\n    this.state.loading &&\n      <div className=\"loader\" />\n\n  renderLogin = () =>\n    <div className=\"login\">\n      <div className=\"container\">\n        <Input\n          value={this.state.APITokenInput}\n          onChange={value => this.setState({APITokenInput: value})}\n          label=\"ZOOM API token\"\n          placeholder=\"Copy the API token from Zoom. Paste it here\"\n        />\n        <button\n          className=\"button button--main mt-3\"\n          onClick={() => this.login(this.state.APITokenInput)}\n        >\n          Log in\n        </button>\n      </div>\n    </div>\n\n  renderControl = () =>\n    <div className=\"control\">\n      <div className=\"container\">\n        <div className=\"control__header\">\n          <div className=\"control__header__token\">\n            {this.state.APIToken\n              .slice(this.state.APIToken.indexOf('id'))}\n          </div>\n          <button\n            className=\"control__header__exit\"\n            onClick={() => this.logout()}\n          >\n            Log out\n          </button>\n        </div>\n      </div>\n\n      <div className=\"control__content\">\n        {this.renderSubtitles()}\n      </div>\n\n      <div className=\"control__next\">\n        <div className=\"container\">\n          <button\n            disabled={\n              this.state.subtitles.filter(sub => !sub.posted).length === 0 ||\n              !this.state.subtitles.filter(sub => !sub.posted)[0].id}\n            className=\"button button--main\"\n            onClick={() => this.next()}\n          >\n            NEXT\n          </button>\n        </div>\n      </div>\n    </div>\n\n  renderSubtitles = () =>\n    <div className=\"container\">\n      <div className=\"control__subtitles\">\n        {this.state.subtitles.length === 0 || !this.state.subtitles[0].id ?\n          <>\n            <textarea\n              className=\"control__subtitles__textarea\"\n              value={this.state.initialText}\n              onChange={e => this.setState({initialText: e.target.value})}\n              placeholder=\"Enter text and press «save». Eachline will be a separate subtitle\"\n            />\n            <button\n              className=\"button button--main\"\n              disabled={this.state.initialText.length === 0}\n              onClick={() => this.saveSubtitle({\n                line: this.state.initialText,\n                APIToken: this.state.APIToken,\n                number: 1,\n              })}\n            >\n              save\n            </button>\n          </>\n          :\n          this.state.subtitles\n            .map((sub, index) =>\n              <div\n                key={sub.id || sub.number}\n                className={`control__subtitles__item ${sub.posted && \"control__subtitles__item--posted\"}`}\n              >\n                <div className=\"control__subtitles__item__number\">\n                  {sub.id && `${sub.number}.`}\n                </div>\n                {sub.posted ?\n                  <>\n                    <div className=\"control__subtitles__item__input\">\n                      {sub.line}\n                    </div>\n                    <div className=\"control__subtitles__item__posted\">\n                      {format(new Date(sub.posted), 'HH:mm:ss')}\n                    </div>\n                  </>\n                  :\n                  <>\n                    <textarea\n                      ref={sub.ref}\n                      className=\"control__subtitles__item__input\"\n                      value={sub.line}\n                      rows={1}\n                      onKeyDown={e =>\n                        e.keyCode === 27 &&\n                        (sub.ref.current && sub.ref.current.blur())}\n                      onChange={e => {\n                        this.setState({\n                          subtitles: [\n                            ...this.state.subtitles.slice(0, index),\n                            {\n                              ...sub,\n                              line: e.target.value,\n                            },\n                            ...this.state.subtitles.slice(index + 1),\n                          ]\n                        })\n\n                        if (e.target.value.includes('\\n'))\n                          sub.ref.current.style.height = \"200px\"\n                      }}\n                      onBlur={() => this.saveSubtitle(sub)}\n                    />\n                    <div className=\"control__subtitles__item__buttons\">\n                      <button\n                        className=\"button button--transparent\"\n                        disabled={!sub.id || index > this.state.subtitles.length - 3}\n                        onClick={() => this.insertSubtitle(sub, index)}\n                      >\n                        +\n                      </button>\n                      <button\n                        className=\"button button--transparent\"\n                        disabled={!sub.id}\n                        onClick={() => this.deleteSubtitle(sub)}\n                      >\n                        -\n                      </button>\n                      <button\n                        className=\"button button--transparent\"\n                        disabled={!sub.id || index === this.state.subtitles.length - 2}\n                        onClick={() => this.swapSubtitles(sub, this.state.subtitles[index + 1])}\n                      >\n                        ⇩\n                      </button>\n                      <button\n                        className=\"button button--transparent\"\n                        disabled={!sub.id || index === 0 || this.state.subtitles[index - 1].posted !== 0}\n                        onClick={() => this.swapSubtitles(sub, this.state.subtitles[index - 1])}\n                      >\n                        ↑\n                      </button>\n                    </div>\n                  </>\n                }\n              </div>\n            )}\n      </div>\n    </div>\n\n\n  render = () =>\n    <div className=\"NewVersion\">\n      {this.state.APIToken ?\n        this.renderControl()\n        :\n        this.renderLogin()}\n\n      {ReactDOM.createPortal(\n        this.renderLoading(),\n        document.body)}\n    </div>\n}\n\n\nexport default NewVersion\n","import axios from 'axios'\nimport serverURL from 'utils/serverURL'\n\n\naxios.defaults.headers.post['Accept'] = \"*/*\"\naxios.defaults.headers.post['Content-Type'] = \"json\"\n\nconst requestLink = props =>\n  props.APIToken + `&seq=${props.count}&lang=ru`\n\nconst postCC = props => \n  axios\n    .post(\n      serverURL + \"old\",\n      {\n        URL: requestLink(props),\n        string: props.string + \"\\n\"\n      }\n    ).then(a => console.log(a.data))\n\n\nexport {\n  postCC\n}","import React, { Component } from 'react'\n\nimport Input from 'components/Input'\nimport { postCC } from './fns'\n\n\nclass OldVersion extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      APIToken: \"\",\n      current: 0,\n      counter: parseInt(window.location.hash.replace(/[^0-9]/g, '')) || 0,\n      text: \"В это текстовое поле можно вбить свои субтитры.\\nКаждая новая строка будет отдельным субтитром\\nЧтобы в ZOOM отобразилась следующая строка, нажмите NEXT\\nЭту страницу не стоит перезагружать, иначе всё может сбиться и сломаться\\n\"\n    }\n  }\n\n  next = () => {\n    const { current, counter, text, APIToken } = this.state\n\n    if (current >= text.split(\"\\n\").length)\n      return\n\n    window.history.replaceState(null, null, \"/zoom-cc/#\" + counter)\n    console.log(counter)\n    postCC({\n      string: text.split(\"\\n\")[current],\n      count: counter,\n      APIToken: APIToken,\n    })\n    this.setState({current: current + 1, counter: counter + 1})\n  }\n\n\n  render = () =>\n    <div className=\"OldVersion\">\n      <div className=\"container\">\n        <Input\n          value={this.state.APIToken}\n          onChange={value => this.setState({APIToken: value})}\n          label=\"ZOOM API token\"\n          placeholder=\"Скопируйте и вставьте ZOOM API token из приложения\"\n        />\n      </div>\n      <div className=\"container\">\n        Текущий субтитр: {this.state.current === 0 ?\n          \"\"\n          :\n          (this.state.current <= this.state.text.split(\"\\n\").length && this.state.text.split(\"\\n\")[this.state.current - 1])\n        }\n      </div>\n      <div className=\"container\">\n        <textarea\n          className=\"LinedTextArea\"\n          value={this.state.text}\n          onChange={e => this.setState({text: e.target.value})}\n        />\n      </div>\n      <div className=\"container\">\n        <button\n          disabled={this.state.APIToken.length === 0 ||\n            this.state.text.length === 0 ||\n            this.state.current >= this.state.text.split(\"\\n\").length\n          }\n          className=\"button button--main\"\n          onClick={() => this.next()}\n        >\n          NEXT\n        </button>\n      </div>\n    </div>\n}\n\n\nexport default OldVersion","import React, { Component } from 'react'\n\nimport NewVersion from 'components/NewVersion'\nimport OldVersion from 'components/OldVersion'\n\nimport 'styles/index.sass'\n\n\nclass App extends Component {\n  constructor(props) {\n    super(props)\n\n    // const currentVersion = window.localStorage.getItem('currentVersion')\n    const currentVersion = \"new\"\n\n    this.state = {\n      currentVersion: currentVersion\n    }\n  }\n\n  setVersion = ver => {\n    this.setState({currentVersion: ver})\n    window.localStorage.setItem('currentVersion', ver)\n  }\n\n  renderButtons = className =>\n    <div className={className}>\n      <button\n        className={`button ${this.state.currentVersion === \"new\" && \"button--selected\"}`}\n        onClick={() => this.setVersion(\"new\")}\n      >\n        новая крутая версия <span\n          className=\"emoji\"\n          role=\"img\"\n          aria-label=\"new\"\n          title=\"new\"\n        >\n          ✨\n        </span>\n      </button>\n      <button\n        className={`button ${this.state.currentVersion === \"old\" && \"button--selected\"}`}\n        onClick={() => this.setVersion(\"old\")}\n      >\n          старая привычная версия <span\n          className=\"emoji\"\n          role=\"img\"\n          aria-label=\"old\"\n          title=\"old\"\n        >\n          👴🏻\n        </span>\n      </button>\n    </div>\n\n  renderHeader = () =>\n    // this.renderButtons(\"App__header\")\n    \"\"\n\n  renderSelect = () =>\n    this.renderButtons(\"App__select\")\n\n  render = () => {\n    let res\n\n    switch (this.state.currentVersion) {\n      case \"old\":\n        res = <OldVersion />\n        break;\n      case \"new\":\n        res = <NewVersion />\n        break;\n      default:\n        res = this.renderSelect()\n    }\n\n    return (\n      <div className=\"App\">\n        {this.state.currentVersion && this.state.currentVersion.match(/new|old/) && this.renderHeader()}\n        {res}\n      </div>\n    )    \n  }\n}\n\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}